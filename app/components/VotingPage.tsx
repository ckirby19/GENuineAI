import { Schema } from "@/amplify/data/resource";
import { generateClient } from "aws-amplify/data";
import { useState } from "react";
import './VotingPage.css';

interface Props {
    username: string;
    participants: Schema["Participant"]["type"][];
    answers: Schema["Answer"]["type"][];
    currentRound: Schema["Round"]["type"] | null;
    currentVotes: Schema["Vote"]["type"][];
}

export const VotingPage = (props: Props) => {
    const client = generateClient<Schema>();
    const [votedAnswerId, setVotedAnswerId] = useState<string | null>(null);
    const currentParticipant = props.participants.find(p => p.userId === props.username)

    async function submitVote(answerId: string) { // For now we will not allow user to update votes, just submit
        if (props.currentRound) {
          const answer = props.answers.find(a => a.id === answerId);
          if (answer) {
            setVotedAnswerId(answerId)
            if (currentParticipant){
              const vote = await client.models.Vote.create({
                roundId: props.currentRound.id,
                participantId: currentParticipant.id,
                answerId: answer.id
              });
              if (!vote.data?.id) {
                console.error("Failed to create vote:", vote.errors);
                return;
              }
              console.log("Vote created:", vote.data);
            }
        }
      }
    }

      return (
        <div className="voting-phase">
            <h2>Vote for the answer you think was generated by a Generative AI model</h2>
            <div>Votes submitted: {props.currentVotes.length} / {props.participants.filter(x => !x.isAiParticipant).length}</div>
            <table>
              <thead>
                <tr>
                  <th>Answer</th>
                  <th>Vote</th>
                </tr>
              </thead>
              <tbody>
                {props.answers 
                  .filter(answer => answer.participantId != currentParticipant?.id) // Filter out users own answer
                  .map((answer) => {
                  const hasVoted = votedAnswerId !== null;
                  const isVotedAnswer = answer.id === votedAnswerId;
                  return (
                    <tr key={answer.id}>
                      <td>{answer.text}</td>
                      <td>
                          <button 
                            onClick={() => submitVote(answer.id)}
                            disabled={hasVoted}
                            className={`vote-button ${isVotedAnswer ? 'voted' : ''} ${hasVoted && !isVotedAnswer ? 'disabled' : ''}`}
                            >
                            {isVotedAnswer ? 'âœ“ Voted' : 'Vote'}
                          </button>
                        
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
        </div>
    );
}